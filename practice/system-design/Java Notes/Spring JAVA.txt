IOC container:
==============
	        1.)Spring instantiates the objects of the class in the IOC container, 
		   which are mentioned in the config file.

		2.)Two types of IOC container:
		   -BeanFactory		
		   -APPLICATIONCONTEXT(Mostly used Container) is an interface.

		3.)ClassPathXMLApplicationContext implements ApplicationContext.

		4.)getBean() of ApplicationContext can be used to get object from Container.

=>"ApplicationContext" reads the 'beans.xml' file and creates the objects in the IOC container.
=>'beans.xml' file contains the classes for which objects will be instantiated.
=>


Dependency Injection:
=====================
		1.)Properties of a class are dependencies of that class.
		   We do not need to initialize member variables of that class.f
		   Spring does that for us.

		2.)Methods to inject dependencies:
		-Setter Injection
		-Constructor Injection

		3.)
		   Setter Injection:(using PROPERTY tag)
		   --------------------------------------
		   <property name="studentName" value="Dipesh" />
		   We can add dependency using 'property' tag inside the 'bean' tag.
		  
		   Constructor Injection:(using CONSTRUCTOR-ARG tag)
		   --------------------------------------------------
		   <constructor-arg name="studentName" value="Dipesh" />
		   <constructor-arg name="id" value="5" />
		



Tight Coupling:
--------------
Tight Coupling in OOPS means that the object instanitiation is hard-coded and uses the new keyword.

Springs helps us achieve loose coupling.
We can  1.)'Instantiate' objects automatically.
	2.)'Initialize' our (literal/objective)dependency of the class.

*)Objects instantiation is done through "<bean> </bean>".

*)Dependencies are injected into obejcts through <bean> "<property> </property>" </bean>