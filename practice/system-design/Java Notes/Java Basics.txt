
OVERLOADING & OVERRIDING:
=========================================================
#)Method Overloading in Java is that the method signature should be different
 i.e. either the number of arguments or the type of arguments.
Example of Compile Time Polymorphism

#)Method Overriding:
The method can ONLY be overriden in the SUB class.
Name and Signature should be same in Super and Sub class.
The Overriding method can not reduce the ACCESSIBILITY of Overridden method.
The Overriding method can not throw an EXCEPTION that is greater in heirarchy ,than what is thrown by the overriden method.
Private, Static and Final methods can not be overriden.
An ABSTRACT method can only be used by overriding.
Example of RUNTIME Polymorphism.

#)Static Methods:
Can not be overriden.
Can be overloaded.
Resolved during compile time.
Not bound to any object , instead belong to a class.
Instance methods can not be overriden as static methods using static.

#)Super keyword:
We can call a superclass version of an overriding method in the subclass by using the super keyword.




ABSTRACT CLASS & INTERFACE (Polymorphism)
===============================================================
#)Abstract Class:
-----------------
Instances of abstract classes can not be created.	Ex: Abc instance = new ABC();	[Error]
To use abstract class, it MUST be OVERRIDEN by a method in the class extends it.
A class can be abstract without any abstract methods.	

#)Interfcae:
-------------
Interface is a contract for the classes.
The only way to support MULTIPLE INHERITANCE in java is through interfaces.Functions of multiple classes can be used(overriden) in single class.
Ex: class Three implements one, two{}
Interfaces can only contain ABSTRACT methods.
EXCEPTION: After Java 8 default and static methods are allowed.

#)DIFFERENCE between abstract class(extends) and interface(implements) :
-------------------------------------------------------------------------
Abstract class does not support multiple inheritance while interface does.
Abstract classes can contain both methods(A & NA) while interface(abstract, static , default) does not contain CONCRETE/'NON-Abstract' methods.
Abstract methods of abstract class must be overriden , and ALL methods of interface should be overriden.


SYNCHRONIZATION.
=============================================================
Synchronization is used to prevent usage of shared resources at a single time.
If multiple threads are trying to use the same file , it will only let one thread use the file.

KEYWORD Used : SYNCHRONIZED
---------------------------
The kewyword is used with methods and blocks only .
I)synchronized(this)	{//synchronized block}
II)synchronized void methodName()	{//synchronized method}

KEYWORD Used : SYNCHRONIZED STATIC
----------------------------------
III)static synchronization is used where we have two threads with different locks, which get access into 
    the synchronized block/method.
    Using STATIC will shift the lock access to CLASS, from object/method.

NOTE:	OBJECT LOCK is enforced by using synchronized.
	CLASS LOCK is enforced by using static synchronized.

-Example:	
-Using 'synchronized static' void methodName() will prevent another thread to intercept.
Power ob1 = new Power(); //first object
Power ob2 = new Power(); //second object

Thread1 p1 = new Thread1(ob1);  
Thread2 p2 = new Thread2(ob2); 

p1.start();  
p2.start();



MULTITHREADING:(Enables Concurrent Execution)
===============================================
I)THREAD: 
->Thread is a sub-unit of a process that needs to be run concurrently.
->Since they are part of the process and dependent , synchronization needs to be done to avoid problems.
->They share data with each other and are executed independently.

	I)CREATION:

	-Option-1:)Extending the THREAD CLASS:
g	The class extending the Thread class overrides the run() method available in the Thread class. 
	A thread begins its life inside run() method. 
	We create an object of our new class and call start() method to start the execution of a thread. 
	Start() invokes the run() method on the Thread object.
	Example:	class MultithreadingDemo extends Thread {
    					public void run(){}
			}
			Driver method{
					MultithreadingDemo object = new MultithreadingDemo();
            						   object.start();
			}

	-Option-2:)Implementing the RUNNABLE INTERFACE:
	The class implementing the Runnable interface overrides the run() method available in the Runnable interface.
	Then we instantiate a Thread object and call start() method on this object. 
	Which in turn calls the run() method.
	Example:
		class MultithreadingDemo implements Runnable {
   		 					public void run(){}
		}
		Driver method{
					Thread object = new Thread(new MultithreadingDemo());
            				       object.start();
			}


II)METHODS USED:(wait()(belongs to Thread class),(sleep(),notify(),notifyAll())(belong to Object class)):
---------------------------------------------------------------------------------------------------------
	These are the methods used by threads for inter-thread communication.

->wait()[non-static method]:  It simply releases the lock and is mostly used for inter-thread communication.
	  		      It is defined in the object class, and should only be called from a synchronized context.

->sleep()[static method]: Stops the execution of the current thread for some specified period.
			  Doesn’t release the lock while waiting and no need to call from Sync block.

->notify(): It sends a notification and wakes up only a single thread instead of multiple threads that are waiting on the object’s lock.


III)DAEMON THREAD: Are low priority threads that run in the background to perform tasks such as Garbage Collection.
		   main() is a non-daemon thread.
		   these threads can't stop JVM from exiting.


#)Difference between List , Set and Map:
========================================

1.)List:	Ordered,		Allows duplicates,		Multiple null elements,	
  Types:	ArrayList , Stack , Vector , LinkedList.

		
2.)Set :	Unordered,		No duplicates,			One null element,
Exception: 	Hashset is unordered.
		TreeSet, SortedSet and LinkedHashSet maintain insertion order.		[O(1) for SID]


3.)Map:		Unordered,		No duplicate keys,		One null key,	
LinkedHashMap(Ordered) : Preserves the ordering.
TreeMap(Sorted) : Keeps the elements sorted.
HashMap(Unordered) : Generic purposes.
ConcurrentHashMap(Concurrent) : Thread-Safe , Encables concurrency.

-storing a value in an existing key will override the current value.
-1 null key, mutiple null/duplicate values allowed.


ArrayList v/s Vector:
======================
-Non-Sync			Synchronized
-Faster				Slow
-Fail-fast			Thread-Safe
-Concurrent Access		Single Thread Access
-Synchronization needed		No need


ArrayList v/s LinkedList:
-Dynamic array			Doubly Linked List
-Better performance while	Better performance while
storage and access		manipulation(Insertion/Deletion)


Comparator v/s Comparable:
==========================

A basic differentiating feature is that using comparable we can use only one comparison. 
Whereas, we can write more than one custom comparators as you want for a given type,
all using different interpretations of what sorting means. 
Like in the comparable example we could just sort by only one attribute,
i.e., year but in the comparator, we were able to use different attributes like rating, name, and year as well.



PROJECT STRUCTURE:
===================
Controller  	 <->	   Service(Business Logic)	<-> 	Repository(DAO) 


CONTROLLER CLASS:
------------------
1-Request is received by DispatcherServlet , which maps the URI request to the controller method.
2-Execute method to process ResponseEntity. [done by developer]
3-ResponseEntity processed as response in XML/JSON.

*@Controller is a type(extended use-case) of @Component.
1-marks the annotated class as business/presentation layer.
2-informs DispatcherServlet to look for methods mapped by '@RequestMapping'.

*@RestController extends the capabilities of both the @Controller and @ResponseBody annotations.
1-applied on the class
2-applies @ResponseBody at class level.

*@GetMapping is equal to @RequestMapping(method = RequestMethod.GET).

*@ResponseBody serializes the fields from the fetched object into JSON and returns to the client that requested it.

